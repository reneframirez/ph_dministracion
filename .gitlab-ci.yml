# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - check-environment
  - build
  - deploy

check-environment:
  stage: check-environment
  script:
    - |
      if [ ! -f .env ]; then
        echo "Error: The .env file does not exist."
        exit 1
      fi
      if ! grep -qE 'VITE_APP_VERSION=.*' .env || ! grep -qE 'VITE_APP_ENTORNO=.*' .env || ! grep -qE 'NOMBRE_BACKEND=.*' .env || ! grep -qE 'USUPRODEF_PRUEBA=.*' .env; then
        echo "Error: The .env file is missing one or more required properties."
        exit 1
      fi

build-testing:       # This job runs in the build stage, which runs first.
  stage: build
  artifacts:
    paths:
      - "dist/"
    when: on_success
    expire_in: 14 days
  script:
    - npm ci
    - npm run build:testing
  only:
    - /^release/

build-production:       # This job runs in the build stage, which runs first.
  stage: build
  artifacts:
    paths:
      - "dist/"
    when: on_success
    expire_in: 14 days
  script:
    - npm ci
    - npm run build:prod
  only:
    - master

deploy-testing:
  stage: deploy
  environment: testing
  script:
    - app_name=$(cat package.json | jq -r '.name')
    - app_version=$(cat package.json | jq -r '.version')
    - ssh macuna@10.16.25.205 "mkdir -p /var/www/html/web_apps/$app_name/$app_version/testing"
    - scp -r $CI_PROJECT_DIR/dist/$app_name/$app_version/testing macuna@10.16.25.205:/var/www/html/web_apps/$app_name/$app_version
  only:
    - /^release/


deploy-production:
  stage: deploy
  environment: production
  script:
    - app_name=$(cat package.json | jq -r '.name')
    - app_version=$(cat package.json | jq -r '.version')
    - ssh macuna@10.16.25.205 "mkdir -p /var/www/html/web_apps/$app_name/$app_version/produccion"
    - scp -r $CI_PROJECT_DIR/dist/$app_name/$app_version/produccion macuna@10.16.25.205:/var/www/html/web_apps/$app_name/$app_version
  only:
    - master
  when: manual
